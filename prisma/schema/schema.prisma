// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["prismaSchemaFolder"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Users Model - Represents the users of the application
model User {
  id           Int   @id @default (autoincrement())      // Primary key with auto-increment
  username     String @unique             // Unique username
  email        String @unique            // Unique email
  password     String                      // Encrypted password
  stickers     Sticker[]                   // A user has many stickers
  stickerSettings StickerSetting[]         // A user has many sticker settings
  passwords    PersonalPassword[]          // A user has many personal passwords
  groceryList  GroceryList[]               // A user has many grocery items
  meals        MealsForWeek[]              // A user has many meal plans
  monthlyBudget MonthlyBudget[]            // A user has many budget items
  spendTracker SpendTracker[]              // A user has many spend records
  medical      PersonalMedical[]           // A user has many medical records
  habits       HabitTracker[]              // A user has many habits
  cleaning     CleaningChecklist[]         // A user has many cleaning tasks
  subPlans     SubPlan[]                   // A user has many sub plans
  seatingCharts SeatingChart[]             // A user has many seating charts
  jobs         ClassroomJob[]              // A user has many classroom jobs
  schoolPasswords SchoolPassword[]         // A user has many school passwords
  rewards      ClassroomReward[]           // A user has many classroom rewards
  ieps         IEP[]                       // A user has many IEPs
  grades       Grading[]                   // A user has many grades
  transportation StudentTransportation[]   // A user has many transportation records
  classRoster  ClassRoster[]               // A user has many class roster entries
  lessonPlans  WeeklyLessonPlan[]          // A user has many weekly lesson plans
  dailyLessons DailyLessonPlan[]           // A user has many daily lesson plans
  calendarEvents CalendarEvent[]           // A user has many calendar events
  todos        ToDoList[]                  // A user has many to-do tasks
  reflectionSurveys ReflectionSurvey[]     // A user has many reflection surveys
  shoppingList  ShoppingList[]             // A user has many shopping list items
  journals     Journal[]                   // A user has many journal entries
}

// Stickers Model - Stores user-specific stickers
model Sticker {
  id          Int    @id @default  (autoincrement())       // Primary key with auto-increment
  userId      Int       
  content     String                           // Content of the sticky note
  positionX   Int                              // X position on the screen
  positionY   Int                              // Y position on the screen
  width       Int                              // Width of the sticker
  height      Int                              // Height of the sticker
  color       String                           // Sticker color (e.g., #ffcc00)
  zIndex      Int                              // Z-index for layering stickers

  user User @relation(fields: [userId], references: [id])
}

// Sticker Settings Model - Stores user-specific default settings for stickers
model StickerSetting {
  id              Int   @id @default   (autoincrement())      // Primary key with auto-increment
  userId          Int           // Foreign key referencing User model
  defaultColor    String                           // Default color for new stickers
  defaultSizeWidth Int                               // Default width for new stickers
  defaultSizeHeight Int                             // Default height for new stickers
  
  user User @relation(fields: [userId], references: [id])
}

// Calendar Table
model CalendarEvent {
  id Int @id @default (autoincrement())
  userId Int 
  eventName String
  eventDate DateTime
  description String

  user User @relation(fields: [userId], references: [id])
}

// To-Do List Table
model ToDoList {
  id Int @id @default (autoincrement())
  userId Int
  taskName String
  isCompleted Boolean

  user User @relation(fields: [userId], references: [id])
}

// Reflection Survey Table
model ReflectionSurvey {
  id Int @id @default (autoincrement())
  userId Int
  question String
  answer String

  user User @relation(fields: [userId], references: [id])
}

// Shopping List Table
model ShoppingList {
  id Int @id @default (autoincrement())
  userId Int
  itemName String
  quantity Int
  store String
  price Float

  user User @relation(fields: [userId], references: [id])
}

// Journal Entries Table
model Journal {
  id Int @id @default (autoincrement())
  userId Int
  entryText String

  user User @relation(fields: [userId], references: [id])
}

